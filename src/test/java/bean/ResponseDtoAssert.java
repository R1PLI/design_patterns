package bean;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;

/**
 * {@link ResponseDto} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ResponseDtoAssert extends AbstractAssert<ResponseDtoAssert, ResponseDto> {

  /**
   * Creates a new <code>{@link ResponseDtoAssert}</code> to make assertions on actual ResponseDto.
   * @param actual the ResponseDto we want to make assertions on.
   */
  public ResponseDtoAssert(ResponseDto actual) {
    super(actual, ResponseDtoAssert.class);
  }

  /**
   * An entry point for ResponseDtoAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myResponseDto)</code> and get specific assertion with code completion.
   * @param actual the ResponseDto we want to make assertions on.
   * @return a new <code>{@link ResponseDtoAssert}</code>
   */
  public static ResponseDtoAssert assertThat(ResponseDto actual) {
    return new ResponseDtoAssert(actual);
  }

  /**
   * Verifies that the actual ResponseDto's response contains the given Error elements.
   * @param response the given elements that should be contained in actual ResponseDto's response.
   * @return this assertion object.
   * @throws AssertionError if the actual ResponseDto's response does not contain all given Error elements.
   */
  public ResponseDtoAssert hasResponse(Error... response) {
    // check that actual ResponseDto we want to make assertions on is not null.
    isNotNull();

    // check that given Error varargs is not null.
    if (response == null) failWithMessage("Expecting response parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getResponse(), response);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ResponseDto's response contains <b>only<b> the given Error elements and nothing else in whatever order.
   * @param response the given elements that should be contained in actual ResponseDto's response.
   * @return this assertion object.
   * @throws AssertionError if the actual ResponseDto's response does not contain all given Error elements.
   */
  public ResponseDtoAssert hasOnlyResponse(Error... response) {
    // check that actual ResponseDto we want to make assertions on is not null.
    isNotNull();

    // check that given Error varargs is not null.
    if (response == null) failWithMessage("Expecting response parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getResponse(), response);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ResponseDto's response does not contain the given Error elements.
   *
   * @param response the given elements that should not be in actual ResponseDto's response.
   * @return this assertion object.
   * @throws AssertionError if the actual ResponseDto's response contains any given Error elements.
   */
  public ResponseDtoAssert doesNotHaveResponse(Error... response) {
    // check that actual ResponseDto we want to make assertions on is not null.
    isNotNull();

    // check that given Error varargs is not null.
    if (response == null) failWithMessage("Expecting response parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getResponse(), response);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ResponseDto has no response.
   * @return this assertion object.
   * @throws AssertionError if the actual ResponseDto's response is not empty.
   */
  public ResponseDtoAssert hasNoResponse() {
    // check that actual ResponseDto we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have response but had :\n  <%s>";
    
    // check
    if (actual.getResponse().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getResponse());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
