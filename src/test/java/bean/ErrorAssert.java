package bean;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Error} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ErrorAssert extends AbstractAssert<ErrorAssert, Error> {

  /**
   * Creates a new <code>{@link ErrorAssert}</code> to make assertions on actual Error.
   * @param actual the Error we want to make assertions on.
   */
  public ErrorAssert(Error actual) {
    super(actual, ErrorAssert.class);
  }

  /**
   * An entry point for ErrorAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myError)</code> and get specific assertion with code completion.
   * @param actual the Error we want to make assertions on.
   * @return a new <code>{@link ErrorAssert}</code>
   */
  public static ErrorAssert assertThat(Error actual) {
    return new ErrorAssert(actual);
  }

  /**
   * Verifies that the actual Error's message is equal to the given one.
   * @param message the given message to compare the actual Error's message to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Error's message is not equal to the given one.
   */
  public ErrorAssert hasMessage(String message) {
    // check that actual Error we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMessage = actual.getMessage();
    if (!Objects.areEqual(actualMessage, message)) {
      failWithMessage(assertjErrorMessage, actual, message, actualMessage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Error's status is equal to the given one.
   * @param status the given status to compare the actual Error's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Error's status is not equal to the given one.
   */
  public ErrorAssert hasStatus(String status) {
    // check that actual Error we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualStatus = actual.getStatus();
    if (!Objects.areEqual(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return this;
  }

}
